from delay_de_solver import make_delay_solver
import matplotlib.pyplot as plt
from numba import jit
import numpy as np


def model_maker():
    # noinspection PyUnusedLocal
    @jit(nopython=True)
    def f(t, y, y_delay):
        return -y_delay

    # noinspection PyUnusedLocal
    @jit(nopython=True)
    def jac_f(t, y, y_delay):
        return np.array([0.0], dtype=np.float64)

    return f, jac_f, [1.0]


solver = make_delay_solver(*model_maker())

t_span = (0.0, 14.0)

result = solver(y0=np.array([1.0], dtype=np.float64), t_span=t_span, dt=0.01)

# fig, axs = plt.subplots(3, 3)
# for idx in range(9):
#     row = idx % 3
#     col = idx // 3
#     axs[row, col].plot(result[0], result[1][:, idx])
#     axs[row, col].set_title(var_names[idx])

plt.plot(result[0], result[1])

plt.tight_layout()
plt.show()

# you can also get a piecewise analytic solution in sage, with an analytic starting interval
# sage: f_prev = 1*x^0
# ....: fs_arr = [ ( (-1,0), f_prev ) ]
# ....: P = plot(f_prev, (x,-1,0))
# ....: for n in range(1,15):
# ....:     f_next = integrate(-f_prev(x=x-1),x)
# ....:     f_next += f_prev(x=n-1)-f_next(x=n-1)
# ....:     P += plot(f_next, (x,n-1,n))
# ....:     fs_arr.append( ((n-1, n), f_next ) )
# ....:     f_prev = f_next
# ....: P.show()
# this yeilds the following piecewise function:
# [((-1, 0), 1),
#  ((0, 1), -x + 1),
#  ((1, 2), 1/2*x^2 - 2*x + 3/2),
#  ((2, 3), -1/6*x^3 + 3/2*x^2 - 4*x + 17/6),
#  ((3, 4), 1/24*x^4 - 2/3*x^3 + 15/4*x^2 - 17/2*x + 149/24),
#  ((4, 5), -1/120*x^5 + 5/24*x^4 - 2*x^3 + 109/12*x^2 - 115/6*x + 1769/120),
#  ((5, 6),
#   1/720*x^6 - 1/20*x^5 + 35/48*x^4 - 197/36*x^3 + 1061/48*x^2 - 1085/24*x + 26239/720),
#  ((6, 7),
#   -1/5040*(x - 1)^7 + 1/120*x^6 - 47/240*x^5 + 20/9*x^4 - 2083/144*x^3 + 109/2*x^2 - 15841/144*x
#   + 6439/70),
#  ((7, 8),
#   1/40320*(x - 2)^8 - 1/840*(x - 1)^7 + 47/1440*x^6 - 461/720*x^5 + 405/64*x^4 - 1811/48*x^3
#   + 13069/96*x^2 - 275563/1008*x + 9473369/40320),
#  ((8, 9),
#   -1/362880*(x - 3)^9 + 1/6720*(x - 2)^8 - 47/10080*(x - 1)^7 + 461/4320*x^6 - 5489/2880*x^5
#   + 625/36*x^4 - 10573/108*x^3 + 76983/224*x^2 - 5557415/8064*x + 109722793/181440),
#  ((9, 10),
#   1/3628800*(x - 4)^10 - 1/60480*(x - 3)^9 + 47/80640*(x - 2)^8 - 461/30240*(x - 1)^7
#   + 5489/17280*x^6 - 1721/320*x^5 + 161051/3456*x^4 - 766679/3024*x^3 + 14105389/16128*x^2
#   - 127351723/72576*x + 1135753187/725760),
#  ((10, 11),
#   -1/39916800*(x - 5)^11 + 1/604800*(x - 4)^10 - 47/725760*(x - 3)^9 + 461/241920*(x - 2)^8
#   - 5489/120960*(x - 1)^7 + 1721/1920*x^6 - 50797/3456*x^5 + 864/7*x^4 - 31749065/48384*x^3
#   + 162490505/72576*x^2 - 2591857/576*x + 10820487737/2661120),
#  ((11, 12),
#   1/479001600*(x - 6)^12 - 1/6652800*(x - 5)^11 + 47/7257600*(x - 4)^10 - 461/2177280*(x - 3)^9
#   + 5489/967680*(x - 2)^8 - 1721/13440*(x - 1)^7 + 50797/20736*x^6 - 4763879/120960*x^5
#   + 62748517/193536*x^4 - 739552759/435456*x^3 + 238740365/41472*x^2 - 11574983537/997920*x
#   + 1015340062277/95800320),
#  ((12, 13),
#   -1/6227020800*(x - 7)^13 + 1/79833600*(x - 6)^12 - 47/79833600*(x - 5)^11
#   + 461/21772800*(x - 4)^10 - 5489/8709120*(x - 3)^9 + 1721/107520*(x - 2)^8
#   - 50797/145152*(x - 1)^7 + 4763879/725760*x^6 - 14408507/138240*x^5 + 823543/972*x^4
#   - 1914678911/435456*x^3 + 237115895941/15966720*x^2 - 53251182223/1774080*x
#   + 34490702069591/1245404160),
#  ((13, 14),
#   1/87178291200*(x - 8)^14 - 1/1037836800*(x - 7)^13 + 47/958003200*(x - 6)^12
#   - 461/239500800*(x - 5)^11 + 5489/87091200*(x - 4)^10 - 1721/967680*(x - 3)^9
#   + 50797/1161216*(x - 2)^8 - 4763879/5080320*(x - 1)^7 + 14408507/829440*x^6
#   - 340503571/1244160*x^5 + 31640625/14336*x^4 - 2525651851/221760*x^3
#   + 7359241741669/191600640*x^2 - 6930646355257/88957440*x + 140476850176669/1937295360)]
# etc

analytic_soln = [
    ((-1, 0), lambda x: 1),
    ((0, 1), lambda x: -x + 1),
    ((1, 2), lambda x: 1 / 2 * x**2 - 2 * x + 3 / 2),
    ((2, 3), lambda x: -1 / 6 * x**3 + 3 / 2 * x**2 - 4 * x + 17 / 6),
    ((3, 4), lambda x: 1 / 24 * x**4 - 2 / 3 * x**3 + 15 / 4 * x**2 - 17 / 2 * x + 149 / 24),
    (
        (4, 5),
        lambda x: -1 / 120 * x**5
        + 5 / 24 * x**4
        - 2 * x**3
        + 109 / 12 * x**2
        - 115 / 6 * x
        + 1769 / 120,
    ),
    (
        (5, 6),
        lambda x: 1 / 720 * x**6
        - 1 / 20 * x**5
        + 35 / 48 * x**4
        - 197 / 36 * x**3
        + 1061 / 48 * x**2
        - 1085 / 24 * x
        + 26239 / 720,
    ),
    (
        (6, 7),
        lambda x: -1 / 5040 * (x - 1) ** 7
        + 1 / 120 * x**6
        - 47 / 240 * x**5
        + 20 / 9 * x**4
        - 2083 / 144 * x**3
        + 109 / 2 * x**2
        - 15841 / 144 * x
        + 6439 / 70,
    ),
    (
        (7, 8),
        lambda x: 1 / 40320 * (x - 2) ** 8
        - 1 / 840 * (x - 1) ** 7
        + 47 / 1440 * x**6
        - 461 / 720 * x**5
        + 405 / 64 * x**4
        - 1811 / 48 * x**3
        + 13069 / 96 * x**2
        - 275563 / 1008 * x
        + 9473369 / 40320,
    ),
    (
        (8, 9),
        lambda x: -1 / 362880 * (x - 3) ** 9
        + 1 / 6720 * (x - 2) ** 8
        - 47 / 10080 * (x - 1) ** 7
        + 461 / 4320 * x**6
        - 5489 / 2880 * x**5
        + 625 / 36 * x**4
        - 10573 / 108 * x**3
        + 76983 / 224 * x**2
        - 5557415 / 8064 * x
        + 109722793 / 181440,
    ),
    (
        (9, 10),
        lambda x: 1 / 3628800 * (x - 4) ** 10
        - 1 / 60480 * (x - 3) ** 9
        + 47 / 80640 * (x - 2) ** 8
        - 461 / 30240 * (x - 1) ** 7
        + 5489 / 17280 * x**6
        - 1721 / 320 * x**5
        + 161051 / 3456 * x**4
        - 766679 / 3024 * x**3
        + 14105389 / 16128 * x**2
        - 127351723 / 72576 * x
        + 1135753187 / 725760,
    ),
    (
        (10, 11),
        lambda x: -1 / 39916800 * (x - 5) ** 11
        + 1 / 604800 * (x - 4) ** 10
        - 47 / 725760 * (x - 3) ** 9
        + 461 / 241920 * (x - 2) ** 8
        - 5489 / 120960 * (x - 1) ** 7
        + 1721 / 1920 * x**6
        - 50797 / 3456 * x**5
        + 864 / 7 * x**4
        - 31749065 / 48384 * x**3
        + 162490505 / 72576 * x**2
        - 2591857 / 576 * x
        + 10820487737 / 2661120,
    ),
    (
        (11, 12),
        lambda x: 1 / 479001600 * (x - 6) ** 12
        - 1 / 6652800 * (x - 5) ** 11
        + 47 / 7257600 * (x - 4) ** 10
        - 461 / 2177280 * (x - 3) ** 9
        + 5489 / 967680 * (x - 2) ** 8
        - 1721 / 13440 * (x - 1) ** 7
        + 50797 / 20736 * x**6
        - 4763879 / 120960 * x**5
        + 62748517 / 193536 * x**4
        - 739552759 / 435456 * x**3
        + 238740365 / 41472 * x**2
        - 11574983537 / 997920 * x
        + 1015340062277 / 95800320,
    ),
    (
        (12, 13),
        lambda x: -1 / 6227020800 * (x - 7) ** 13
        + 1 / 79833600 * (x - 6) ** 12
        - 47 / 79833600 * (x - 5) ** 11
        + 461 / 21772800 * (x - 4) ** 10
        - 5489 / 8709120 * (x - 3) ** 9
        + 1721 / 107520 * (x - 2) ** 8
        - 50797 / 145152 * (x - 1) ** 7
        + 4763879 / 725760 * x**6
        - 14408507 / 138240 * x**5
        + 823543 / 972 * x**4
        - 1914678911 / 435456 * x**3
        + 237115895941 / 15966720 * x**2
        - 53251182223 / 1774080 * x
        + 34490702069591 / 1245404160,
    ),
    (
        (13, 14),
        lambda x: 1 / 87178291200 * (x - 8) ** 14
        - 1 / 1037836800 * (x - 7) ** 13
        + 47 / 958003200 * (x - 6) ** 12
        - 461 / 239500800 * (x - 5) ** 11
        + 5489 / 87091200 * (x - 4) ** 10
        - 1721 / 967680 * (x - 3) ** 9
        + 50797 / 1161216 * (x - 2) ** 8
        - 4763879 / 5080320 * (x - 1) ** 7
        + 14408507 / 829440 * x**6
        - 340503571 / 1244160 * x**5
        + 31640625 / 14336 * x**4
        - 2525651851 / 221760 * x**3
        + 7359241741669 / 191600640 * x**2
        - 6930646355257 / 88957440 * x
        + 140476850176669 / 1937295360,
    ),
]

result_ts = result[0]
analytic_eval = np.zeros_like(result[1])

for span, fn in analytic_soln:
    mask = (span[0] <= result_ts) & (result_ts < span[1])
    if np.any(mask):
        analytic_eval[mask] = fn(result_ts[mask])[:, np.newaxis]

print("Max absolute error:")
print(np.max(np.abs(analytic_eval - result[1])))
